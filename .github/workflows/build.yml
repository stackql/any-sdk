name: Build

on:
  push:
    branches:
      - main
      - develop
      - version*
    tags:
      - build*
  pull_request:
    branches:
      - main
      - develop
      - version*

env:
  GOGETCMD: "go get -v -t -d ./..."
  GOTESTCMD: "go test -timeout 240s -v ./..."
  GOPRIVATE: github.com/stackql/*
  GH_ACCESS_TOKEN: ${{ secrets.ACTIONS_PRIVATE_PACKAGE_SECRET }}
  PLANCACHEENABLED: "true"
  GOLANG_VERSION: 1.22
  STACKQL_CORE_REPOSITORY: ${{ vars.STACKQL_CORE_REPOSITORY != '' && vars.STACKQL_CORE_REPOSITORY || 'stackql/stackql' }}
  STACKQL_CORE_REF: ${{ vars.STACKQL_CORE_REF != '' && vars.STACKQL_CORE_REF || 'main' }}

jobs:

  winbuild:
    name: Windows Build
    runs-on: windows-latest
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^${{ env.GOLANG_VERSION }}
      id: go

    - name: Get rid of dissruptive line endings before checkout
      run: |
        git config --global core.autocrlf false

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        go env -w GOPRIVATE="github.com/stackql/*"
        git config --global url."https://$env:GHACCESSTOKEN@github.com/".insteadOf "https://github.com/"
        git --no-pager config --list
        go get -v -t -d ./...
      env:
        GOGETCMD: ${{env.GOGETCMD}}
        CGO_ENABLED: 1
        GHACCESSTOKEN: ${{env.GH_ACCESS_TOKEN}}
        GOPRIVATE: ${{env.GOPRIVATE}}

    - name: Generate Build Flags and Build
      env:
        BUILDCOMMITSHA: ${{github.sha}}
        BUILDBRANCH: ${{github.ref}}
        BUILDPLATFORM: ${{runner.os}}
        BUILDPATCHVERSION: ${{github.run_number}}
        CGO_ENABLED: 1
        GH_ACCESS_TOKEN: ${{env.GH_ACCESS_TOKEN}}
        GOPRIVATE: ${{env.GOPRIVATE}}
      run: |
        git config --global url.https://$env:GH_ACCESS_TOKEN@github.com/.insteadOf https://github.com/
        $BuildCommitSHA = $env:BUILDCOMMITSHA
        $BuildShortCommitSHA = "$BuildCommitSHA".Substring(0,6)
        $BuildDate = (Get-Date -UFormat "%a %b %e %H:%M:%S UTC %Y").ToString()
        $BuildPlatform = $env:BUILDPLATFORM
        $PlanCacheEnabled = $env:PLANCACHEENABLED	
            
        Write-Output $BuildCommitSHA
        Write-Output $BuildShortCommitSHA
        Write-Output $BuildDate
        Write-Output $BuildPlatform
        
        go build -x -v `
          -o build/anysdk ./cmd/interrogate

    - name: Test
      if: success()
      run: go test -timeout 240s -v ./...

  linuxbuild:
    name: Linux Build
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^${{ env.GOLANG_VERSION }}
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    
    - name: Setup system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
    
    - name: Setup Python
      uses: actions/setup-python@v5.0.0
      with:
        # cache: pip # this requires requirements in source control
        python-version: '3.11' 
      
    - name: Get dependencies
      run: |
        git config --global url.https://$GH_ACCESS_TOKEN@github.com/.insteadOf https://github.com/
        $GOGETCMD
      env:
        GOGETCMD: ${{env.GOGETCMD}}
        GH_ACCESS_TOKEN: ${{env.GH_ACCESS_TOKEN}}
        GOPRIVATE: ${{env.GOPRIVATE}}

    - name: Generate Build Flags and Build
      env:
        BUILDCOMMITSHA: ${{github.sha}}
        BUILDBRANCH: ${{github.ref}}
        BUILDPLATFORM: ${{runner.os}}
        BUILDPATCHVERSION: ${{github.run_number}}
      run: |
        BUILDSHORTCOMMITSHA=$(echo $BUILDCOMMITSHA | cut -c 1-7)
        BUILDDATE=$(date)
        echo "BUILDBRANCH: ${BUILDBRANCH}"
        echo "BUILDCOMMITSHA: ${BUILDCOMMITSHA}"
        echo "BUILDSHORTCOMMITSHA: ${BUILDSHORTCOMMITSHA}"
        echo "BUILDDATE: ${BUILDDATE}"
        echo "BUILDPLATFORM: ${BUILDPLATFORM}"

        go build -x -v \
          -o build/anysdk ./cmd/interrogate
      
    - name: Test
      if: success()
      run: go test -timeout 240s -v ./...
    
    - name: Trivial CLI Test
      if: success()
      run: |
        result="$(build/anysdk const | jq -r '.ExtensionKeyAlwaysRequired')"
        if [ "$result" != "x-alwaysRequired" ]; then
          echo "Trivial CLI Test Failed with unexpected result: $result"
          exit 1
        else
          echo "Trivial CLI Test passed with expected result: $result"
        fi

    - name: Download core
      uses: actions/checkout@v2
      with:
        repository: ${{ env.STACKQL_CORE_REPOSITORY }}
        ref: ${{ env.STACKQL_CORE_REF }}
        path: stackql-core
    
    - name: Create materials for core tests
      working-directory: stackql-core
      run: |
        pip3 install -r cicd/requirements.txt
        openssl req -x509 -keyout test/server/mtls/credentials/pg_server_key.pem -out test/server/mtls/credentials/pg_server_cert.pem -config test/server/mtls/openssl.cnf -days 365
        openssl req -x509 -keyout test/server/mtls/credentials/pg_client_key.pem -out test/server/mtls/credentials/pg_client_cert.pem -config test/server/mtls/openssl.cnf -days 365
        openssl req -x509 -keyout test/server/mtls/credentials/pg_rubbish_key.pem -out test/server/mtls/credentials/pg_rubbish_cert.pem -config test/server/mtls/openssl.cnf -days 365 
        python3 test/python/registry-rewrite.py
    
    - name: Start Core Test Mocks
      working-directory: stackql-core
      run: |
        pgrep -f flask | xargs kill -9 || true
        flask --app=./test/python/flask/gcp/app          run --cert=./test/server/mtls/credentials/pg_server_cert.pem --key=./test/server/mtls/credentials/pg_server_key.pem --host 0.0.0.0 --port 1080 & 
        flask --app=./test/python/flask/oauth2/token_srv run --cert=./test/server/mtls/credentials/pg_server_cert.pem --key=./test/server/mtls/credentials/pg_server_key.pem --host 0.0.0.0 --port 2091 & 
    
    - name: Run core mocked testing
      working-directory: stackql-core
      run: |
        export GCP_SERVICE_ACCOUNT_KEY="$(cat test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json)"
        bucketsListIDs="$(${{ github.workspace }}/build/anysdk query \
          --svc-file-path="test/registry-mocked/src/googleapis.com/v0.1.2/services/storage-v1.yaml" \
          --tls.allowInsecure \
          --prov-file-path="test/registry-mocked/src/googleapis.com/v0.1.2/provider.yaml" \
          --resource buckets \
          --method list \
          --parameters '{ "project": "stackql-demo" }' \
          | jq -r '.items[].id')" 
        matchingBuckets="$(echo "${bucketsListIDs}" | grep "stackql-demo" )"
        if [ "${matchingBuckets}" = "" ]; then
          echo "Core Test Failed with no matching buckets"
          exit 1
        else
          echo "Core Test passed with matching buckets: $matchingBuckets"
        fi
            
    - name: Run local templated openssl mutate test
      run: |
        rm -rf test/tmp/*.pem
        ${{ github.workspace }}/build/anysdk query \
          --svc-file-path="test/registry/src/local_openssl/v0.1.0/services/keys.yaml"  \
          --prov-file-path="test/registry/src/local_openssl/v0.1.0/provider.yaml" \
          --resource rsa \
          --method create_key_pair \
          --parameters '{ 
            "config_file":   "test/openssl/openssl.cnf",
            "key_out_file":  "test/tmp/key.pem",
            "cert_out_file": "test/tmp/cert.pem",
            "days":          90
          }'
        endDateFound="$(openssl x509 -in test/tmp/cert.pem -noout -dates | grep "notAfter")"
        if [ "${endDateFound}" = "" ]; then
          echo "Core Test Failed with no matching end date"
          exit 1
        else
          echo "Core Test passed with matching end date info: $endDateFound"
        fi   

    - name: Run local templated openssl select test
      run: |
        response="$(${{ github.workspace }}/build/anysdk query \
          --svc-file-path='test/registry/src/local_openssl/v0.1.0/services/keys.yaml'  \
          --prov-file-path='test/registry/src/local_openssl/v0.1.0/provider.yaml' \
          --resource x509 \
          --method describe_certificate \
          --parameters '{
            "cert_file": "test/tmp/cert.pem"
          }')"
        publicKeyAlgorithm="$(echo "$response" | jq -r '.public_key_algorithm')"
        if [ "${publicKeyAlgorithm}" != "rsaEncryption" ]; then
          echo "Core Test Failed with unexpected public key algorithm '$publicKeyAlgorithm'"
          exit 1
        else
          echo "Core Test passed with matching public key algorithm: '$publicKeyAlgorithm'"
        fi

  macosbuild:
    name: MacOS Build
    runs-on: macos-latest
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^${{ env.GOLANG_VERSION }}
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        git config --global url.https://$GH_ACCESS_TOKEN@github.com/.insteadOf https://github.com/
        $GOGETCMD
      env:
        GOGETCMD: ${{env.GOGETCMD}}
        CGO_ENABLED: 1
        GH_ACCESS_TOKEN: ${{env.GH_ACCESS_TOKEN}}
        GOPRIVATE: ${{env.GOPRIVATE}}

    - name: Generate Build Flags and Build
      env:
        BUILDCOMMITSHA: ${{github.sha}}
        BUILDBRANCH: ${{github.ref}}
        BUILDPLATFORM: ${{runner.os}}
        BUILDPATCHVERSION: ${{github.run_number}}
        CGO_ENABLED: 1
      run: |
        BUILDSHORTCOMMITSHA=$(echo $BUILDCOMMITSHA | cut -c 1-7)
        BUILDDATE=$(date)
        echo "BUILDBRANCH: ${BUILDBRANCH}"
        echo "BUILDCOMMITSHA: ${BUILDCOMMITSHA}"
        echo "BUILDSHORTCOMMITSHA: ${BUILDSHORTCOMMITSHA}"
        echo "BUILDDATE: ${BUILDDATE}"
        echo "BUILDPLATFORM: ${BUILDPLATFORM}"

        go build -x -v \
          -o build/anysdk ./cmd/interrogate

    - name: Test
      if: success()
      run: go test -timeout 240s -v ./...

  macosarmbuild:
    name: MacOS ARM Build
    runs-on: macos-latest
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^${{ env.GOLANG_VERSION }}
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        git config --global url.https://$GH_ACCESS_TOKEN@github.com/.insteadOf https://github.com/
        $GOGETCMD
      env:
        GOGETCMD: ${{env.GOGETCMD}}
        CGO_ENABLED: 1
        GH_ACCESS_TOKEN: ${{env.GH_ACCESS_TOKEN}}
        GOPRIVATE: ${{env.GOPRIVATE}}

    - name: Generate Build Flags and Build
      env:
        BUILDCOMMITSHA: ${{github.sha}}
        BUILDBRANCH: ${{github.ref}}
        BUILDPLATFORM: "darwin_arm64"
        BUILDPATCHVERSION: ${{github.run_number}}
        CGO_ENABLED: 1
      run: |
        BUILDSHORTCOMMITSHA=$(echo $BUILDCOMMITSHA | cut -c 1-7)
        BUILDDATE=$(date)
        echo "BUILDBRANCH: ${BUILDBRANCH}"
        echo "BUILDCOMMITSHA: ${BUILDCOMMITSHA}"
        echo "BUILDSHORTCOMMITSHA: ${BUILDSHORTCOMMITSHA}"
        echo "BUILDDATE: ${BUILDDATE}"
        echo "BUILDPLATFORM: ${BUILDPLATFORM}"

        GOOS=darwin GOARCH=arm64 \
        go build -x -v \
          -o build/anysdk ./cmd/interrogate
